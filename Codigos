dotnet new webapi

dotnet new mstest

dotnet new sln -n EstatisticaSolucion

dotnet sln add .\EstatisticaAPI\EstatisticaAPI.csproj

dotnet sln add .\EstatisticaAPITest\EstatisticaProjeto.csproj

dotnet add .\EstatisticaAPI\EstatisticaAPI.csproj reference .\EstatisticaAPITest\EstatisticaProjeto.csproj

.

Teste

int tamanho, i=0, j=0, moda;
float media=0, mediana=0, soma=0, aux=0, conta=0;

printf("Qual o total de numeros ? ");
scanf("%d", &tamanho);

int cont[tamanho], v[tamanho];
if(tamanho>0){

	for(i=0;i<tamanho;i++){

	printf("digite o valor ? ");
	scanf("%d", &v[i]);

	soma+=v[i];

	}
}

//moda
for(i=0;i<tamanho;i++){
        for(j=i+1;j<tamanho;j++){
        	
			if(v[i]==v[j]){
				cont[i]++;
					if(cont[i]>conta){
						conta=cont[i];
						moda=i;
					}
			}
        	
        }
        cont[i]=0;
    }
    
printf("Moda: %d ", moda);



novo Teste


 static public void exemploModa()
        {
            // 1 Moda
            double[] lista1 = calcularModa(new double[] { 3, 3, 3, 5, 6, 7, 8, 9, 9, 9, 9 });
            // Retorno:
            //    {double[1]}
            //        [0]: 9.0
            //    

            // 2 Modas - bimodal
            double[] lista2 = calcularModa(new double[] { 3, 3, 3, 5, 6, 7, 8, 9, 9, 9, 9, 3 });
            // Retorno:
            //    {double[2]}
            //        [0]: 3.0
            //        [1]: 9.0

            //Sem moda:
            double[] lista3 = calcularModa(new double[] { 3, 7, 8, 9, 5, 6 });
            // Retorno:
            //    {double[0]}
        }

        // Calcula e retorna os valores de Moda
        static public double[] calcularModa(double[] listaValores)
        {
            //Ordena o vetor
            double[] listaValoresOrdenada = listaValores.ToArray();
            Array.Sort(listaValoresOrdenada);

            //Obtem o primeiro valor da lista ordenada
            double valorAtual = listaValoresOrdenada[0];
            int contadorValorAtual = 0;

            int[] listaNumRepeticoes = new int[listaValoresOrdenada.Length];
            listaNumRepeticoes[0] = contadorValorAtual;

            //Define número de repetição de cada número
            for (int i = 1; i <= listaValoresOrdenada.Length - 1; i++)
            {
                if (listaValoresOrdenada[i] != valorAtual)
                {
                    valorAtual = listaValoresOrdenada[i];
                    contadorValorAtual = 0;
                }
                else
                {
                    contadorValorAtual++;
                }
                listaNumRepeticoes[i] = contadorValorAtual;
            }

            // Exemplo: 
            //   listaValoresOrdenada {3,3,3,5,6,7,8,9,9,9,9}
            // Resultado:
            //   listaNumRepeticoes   {0,1,2,0,0,0,0,0,1,2,3}

            int maiorRepeticao = listaNumRepeticoes.Max();

            if (maiorRepeticao > 0)
            {
                //Obtem todos os valores que mais se repetiram
                int contadorNumRepeticaoMaior = 0;
                for (int i = 0; i < listaNumRepeticoes.Length; i++)
		        {
                    if (listaNumRepeticoes[i] == maiorRepeticao)
                        contadorNumRepeticaoMaior++;
		        }
                //Popula a lista para retornar os valores que mais se repetiram
                double[] listaRetorno = new double[contadorNumRepeticaoMaior];
                int contadorRetorno = 0;
                for (int i = 0; i < listaNumRepeticoes.Length; i++)
                {
                    if (listaNumRepeticoes[i] == maiorRepeticao)
                    {
                        listaRetorno[contadorRetorno] = listaValoresOrdenada[i];
                        contadorRetorno++;
                    }
                }

                return listaRetorno;
            }
            else
            {
                // Não existe repetições, serie de valores sem moda
                return new double[0];
            }
        }  



        ===================================

        float mediaVetor(float vet[], int tam){
            float media, soma = 0;
            int i;

            for(i =0; i<tam; i++){
            soma = soma + vet[i];
            }
            media = (float) soma/tam;

            return media;
        }